'''
 Schema per lo sviluppo del metodo di Numerov 
'''
import matplotlib.pyplot as plt
import numpy as np
import math

'''
 La proposta di implementazione e' divisa quattro step
 Step 1 (S1)
 Step 2 (S2)
 Step 3 (S3)
 Step 4 (S4)
 i comandi commentati (con # in prima colonna) indicano un comandi gia' pronti,
 utilizzabile quando le parti precedenti sono completate
'''

'''
  S1: definire il potenziale in funzione della variabile normalizzata xi
'''


def V(xi):
    y = 0.050
    return xi ** 2


'''
  S1: calcolo di b a partire dall'energia normalizzata eps, della coordinata
  normalizzata xi e dallo passo h (variabile globale)
'''


def b(eps, xi):
    return h * h * (2 * eps - V(xi)) / 12


'''
  S1/S2: completare la funzione Numerov che riempe i valori di psi(xi) 
         dall'indice n1 all'indice n2 (entrambi compresi)
         Schema:
           - definisco indice j in modo che 1 se n2>n1, -1 se n2<n1 (vedi sign di numpy)
             in questo modo:
               se j =  1 indice i, i+j,i+2*j -> i, i+1, i+2
               se j = -1 indice i, i+j,i+2*j -> i, i-1, i-2
           - fornisco i primi due valori di psi
           - implemento Numerov (ciclo for)
'''


def numerov(n1, n2, eps):
    psi = np.array(xi) * 0  # copio xi in psi e lo azzero
    j = np.sign(n2 - n1)
    psi[n1] = 0
    psi[n1 + j] = 1e-6
    for i in range(n1 + 2 * j, n2 + j, j):
        psi[i] = (2 * psi[i - j] * (1 - 5 * b(eps, xi[i - j])) - psi[i - 2 * j] * (1 + b(eps, xi[i - 2 * j]))) / (
                    1 + b(eps, xi[i]))
    return psi


'''
  S3: completare evalDerivative
     - per l'energia eps fornita dall'utente crea soluzione left e right
     - le normalizza a nmatch (si consiglia di normalizzare psir a psil)
     - calcola la differenza (diff) tra le derivate centrate (left e right) in match
'''


def evalDerivative(eps):
    global psir, psil
    psil = numerov(0, nmatch + 1, eps)
    psir = numerov(n - 1, nmatch - 1, eps)
    a = psil[nmatch + 1] / psir[nmatch - 1]
    psir = psir * a
    diff = (psil[nmatch + 1] - psil[nmatch - 1] - psir[nmatch + 1] + psir[nmatch - 1]) / (2 * h)
    return diff


''' 
  Metodo di bisezione per trovare l'energia in cui la funzione evalDerivative
  e' nulla. Cioe' l'enegia per cui  la derivata sinistra e destra coincidono 
'''


def findE(emin, emax, tol):
    while (emax - emin > tol):
        emed = (emin + emax) / 2
        if evalDerivative(emin) * evalDerivative(emed) < 0:
            emax = emed
        else:
            emin = emed
    return (emin + emax) / 2;


''' 
  Codice principale: l'esecuzione dello script parte da qui
'''

n = 14000
nmatch = 10000
xi = np.linspace(-7., 7, n)
h = xi[1] - xi[0]

'''
  S1: verifico Numerov chiamando la funzione da sinistra a destra
  e la disegno
'''
# epsilon = 0.5  # o altra energia di stato definito eps = (n+1/2)
# psi = numerov(0, n-1, epsilon)
# plt.plot(xi, psi)
# plt.show()

'''
  S2: come S1 ma verifico che funzioni anche da destra a sinistra
  e la disegno
'''
# epsilon = 0.5   # o altra energia di stato definito eps = (n+1/2)
# psi=numerov(n-1,0,epsilon)
# plt.plot(xi,psi)
# plt.show()

'''
  S3:
   - commentare i punti precedenti (a parte le definizioni iniziali del Main code
   - completare evalDerivative 
   - chiamare findE 
   - fare grafico delle due funzioni 
'''
# e = findE(0.2, 0.7, 0.0001)
# plt.plot(xi,psil)
# plt.plot(xi,psir)
# plt.show()
# print "Energy ", e

'''
  S4:
   - copiare psr nella parte 'vuota' di psil di modo che psil rappresenti tutta psi(x)
     nell'intervallo dato o, alternativamente, copiarle entrambe in una nuova psi
   - disegnare la funzione d'onda trovata
'''
e = findE(5.4, 5.6, 0.0001)
psi = psir
psi[0:nmatch] = psil[0:nmatch]
# plt.plot(xi, psi)
print "Energy ", e
# plt.show()   alla fine

'''Compito a casa: punto 1'''
# a = np.array([])
# for i in range(0, 401, 1):
#    j = (i/100.0) + 1/1000.0;
#    if evalDerivative(j)*evalDerivative(j+0.01)<0:
#        a = np.append(a, findE(j,j+0.01,0.0001))
# print a
'''Compito a casa: punto 2'''

S = 0.0
for i in range(1, n-1, 1):
    S = S + psi[i] ** 2
Int = (psi[0] ** 2 + psi[n - 1] ** 2) + (h * S)
print Int
psi_norm = psi * 1 / math.sqrt(Int)
plt.plot(xi, psi_norm)
plt.show()

P=0.0
for t in range(1, n-1, 1):
    P = P + psi_norm[i] ** 2
Int2 = (psi_norm[0] ** 2 + psi_norm[n - 1] ** 2) + (h * P)
print Int2
